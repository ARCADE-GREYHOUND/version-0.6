<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ardilla_walking</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicializacion de las variables

grav = 3;
hsp = 0;
hsp_carry = 0;
vsp = 0;
facing = 1;

movespeed_normal = 7;
movespeed_powerup = 12;

jumpspeed_normal = 20;
jumpspeed_powerup = 6;

jumpspeed = jumpspeed_normal;
movespeed = movespeed_normal;

shoot = 0;
can_shoot = 1;

if (global.checkpointR == room)
{
    x = global.checkpointx;
    y = global.checkpointy;
}

key_down = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movimiento del personaje

//Obtener las entradas de teclado

key_right = keyboard_check(vk_right);
key_left = keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);
key_down = keyboard_check(vk_down);
key_shoot = keyboard_check_pressed(vk_space);

//Operaciones con las entradas de teclado

move = key_right - key_left;
hsp = move * movespeed;
if (vsp &lt; 10)
    { vsp += grav; }
if (key_jump) vsp = -jumpspeed;

var hsp_final = hsp + hsp_carry;
hsp_carry = 0;

//Colision horizontal
if (place_meeting(x+hsp_final, y, obj_Block))
{
    while(!place_meeting(x+sign(hsp_final), y, obj_Block)) &amp;&amp; (distance_to_object(obj_Toby) &lt; 35)
    { x += sign(hsp_final); }
    hsp_final = 0;
    hsp = 0;
}

x += hsp_final;

//Colision vertical
if (place_meeting(x, y+vsp, obj_Block))
{
    while(!place_meeting(x, y+sign(vsp), obj_Block))
    { y += sign(vsp); }
    vsp = 0;
}

y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation

image_xscale = facing;

if (hsp &lt; 0) facing = -1;
if (hsp &gt; 0) facing = 1;

if (hsp = 0) 
{ 
    sprite_index = spr_ardilla_idle;
    image_speed = 0.4;
}
else 
{
    sprite_index = spr_ardilla_walking;
    image_speed = 1;
}

if (vsp &lt; 0) { sprite_index = spr_ardilla_jump; }
if (vsp &gt; 0) { sprite_index = spr_ardilla_fall; }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disparar

bullet_right = keyboard_check(vk_right);
bullet_left = keyboard_check(vk_left);

if (bullet_right) {global.bullet_dir = 1;}
if (bullet_left) {global.bullet_dir = -1;}

if(shoot)
{
    if(key_shoot)
    {
        if (can_shoot)
        {
            instance_create(x - movespeed, y, obj_bullet);
            can_shoot = 0;
            alarm[3] = 10;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
