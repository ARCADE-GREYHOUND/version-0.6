<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Toby_standing</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicializacion de las variables

//Variables de movimiento
grav = 5;
hsp = 0;
hsp_carry = 0;
vsp = 0;
movespeed_normal = 7;
movespeed_powerup = 12;
jumpspeed_normal = 25;
jumpspeed_powerup = 6;
jumpspeed = jumpspeed_normal;
movespeed = movespeed_normal;

//Variables de acciones
digging = false;
bite = false;
shoot = false;
can_shoot = true;
damage = false;
bounce = false;


if (global.checkpointR == room)
{
    x = global.checkpointx;
    y = global.checkpointy;
}

key_down = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEFUNCT

can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEFUNCT

shoot = false;
sprite_index = spr_Ball
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RESTORE DAMAGE

damage = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INTERACCION

//Obtener las entradas de teclado

key_right = keyboard_check(vk_right);
key_left = keyboard_check(vk_left);
key_down = keyboard_check(vk_down);
key_jump = keyboard_check_pressed(vk_up);
key_shoot = keyboard_check_pressed(vk_space);
key_hit = keyboard_check_pressed(vk_alt);
key_dig = keyboard_check(vk_alt);

//Operaciones con las entradas de teclado
move = key_right - key_left;
hsp = move * movespeed;

if (place_meeting(x, y+1, obj_Block))
{ if (key_jump) vsp = -jumpspeed; }

var hsp_final = hsp + hsp_carry;
hsp_carry = 0;

// Entrada para ESCARBAR
if (place_meeting(x, y+1, obj_Block))
{
    if (key_down) &amp;&amp; (key_dig) 
    {
        digging = true;
        bite = false;
    }
    else { digging = false; }
}

// Entrada para ATAQUE
if (place_meeting(x, y+1, obj_Block))
{
    if (key_hit) { bite = true; }
}

// Comando ATAQUE
if (bite = true) &amp;&amp; (place_meeting(x, y+1, obj_Block)) 
{
    //Escarbar
    if (digging = true)
    {
        if (global.armor = true) sprite_index = spr_Toby_dig_armor;
        if (global.armor = false) sprite_index = spr_Toby_dig;
        image_speed = 0.5;
        if (place_meeting(x, y, obj_armor))
        {
            with (instance_place(x, y, obj_armor))
            {
                dug = true;
            }
        }
    }
    //Atacar
    else
    {
        if (global.armor = true) sprite_index = spr_Toby_attack_armor;
        if (global.armor = false) sprite_index = spr_Toby_attack;
        image_speed = 1.2;
        if (image_index &gt; 8) 
        { bite = false; }
        if (image_index &gt;= 2) &amp;&amp; (image_index &lt;= 6)
        {
            with (instance_create(x, y, obj_Toby_hitbox))
            {
                image_xscale = other.image_xscale;
                with (instance_place(x, y, obj_enemy_parent))
                { 
                    if (hit = false)
                    {
                        hit = true;
                        vsp = -20;
                        hsp = sign(x - other.x) * 4;
                        image_xscale = sign(hsp);
                    }
                }
            }
        }
    }
}

else
{
    if (bite = false) &amp;&amp; (digging = false)
    {
        /// Animacion
        image_xscale = global.facing;
        image_speed = 0.8;
        if (hsp &lt; 0) global.facing = -1;
        if (hsp &gt; 0) global.facing = 1;
        
            //Con Armadura
            if (global.armor = true)
            {
                if (hsp = 0) { sprite_index = spr_Toby_standing_armor; }
                else { sprite_index = spr_Toby_running_armor; }
                if (vsp &lt; 0) { sprite_index = spr_Toby_jumping_armor; }
                if (vsp &gt; 0) { sprite_index = spr_Toby_falling_armor; }
            }
            //Sin Armadura
            if (global.armor = false)
            {
                if (hsp = 0) { sprite_index = spr_Toby_standing; }
                else { sprite_index = spr_Toby_running; }
                if (vsp &lt; 0) { sprite_index = spr_Toby_jumping; }
                if (vsp &gt; 0) { sprite_index = spr_Toby_falling; }
            }
        
        //Corregir bug de animaci√≥n
        if (sprite_index = spr_Toby_attack) || (sprite_index = spr_Toby_attack_armor)
        {
            if (image_index &gt;= 9) 
            { bite = false; }
        }
        if (sprite_index = spr_Toby_dig) || (sprite_index = spr_Toby_dig_armor)
        {
            if (image_index &gt;= 3)
            { digging = false; }
        }

        //Colision horizontal
        if (place_meeting(x+hsp_final, y, obj_Block)) &amp;&amp; (key_hit = false)
        {
            while(!place_meeting(x+sign(hsp_final), y, obj_Block))
            { x += sign(hsp_final); }
            hsp_final = 0;
            hsp = 0;
        }
        x += hsp_final;

        //Colision vertical
        if (vsp &lt; 10) vsp += grav;
        if (place_meeting(x, y+vsp, obj_Block))
        {
            while(!place_meeting(x, y+sign(vsp), obj_Block))
            { y += sign(vsp); }
            vsp = 0;
        }
        y += vsp;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DISPARAR

// Disparar
bullet_right = keyboard_check(vk_right);
bullet_left = keyboard_check(vk_left);

if (bullet_right) {global.bullet_dir = 1;}
if (bullet_left) {global.bullet_dir = -1;}

if(shoot)
{
    if(key_shoot)
    {
        if (can_shoot)
        {
            instance_create(x - movespeed, y, obj_bullet);
            can_shoot = false;
            alarm[3] = 10;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
